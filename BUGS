
IE bugs :

  * elm.parentNode is always defined, whatever if the element is inserted in the DOM
    or not. You can't use it to check if the element is inserted or not.
    
    Quick fix: check for 'elm.parentNode' and 'elm.parentNode.tagName'.
    
    Maybe I can fix it somehow by overwriting document.createElement,
    document.removeChild and document.removeNode + checking out any property change
    (using MS's onpropertychange)?

  * elm.children[] is broken in IE, since it considers comments as elements. So,
    either filter out comments when using children[] or, preferably, use an output
    filter on your server that strips out all comments from sent HTML -- it shall
    fix some CSS bugs too (eg: :first-child not working because the firstc-child is
    a comment).


IE 8 bugs :

  * In order to be sure to use IE8's engine (and not a compatibility view or whatever)
    you better declare the X-UA-Compatible HTTP meta (and a valid doctype). Otherwise,
    expect problems.
    
    I personally use: <meta http-equiv="X-UA-Compatible" content="IE=edge"/>

  * You musn't declare a 'var Element' or 'var Event' or whatever DOM prototype in a
    script, even inside an if block like the following example, because the variable
    will be set to 'undefined' for the whole script, causing the if check to be true!
    
    if (typeof Element == 'undefined') { // true: Element is undefined, even in IE8!
      var Element = function() {};
    }

  * IE8 implements elm.querySelectorAll(), but comes with a restricted support of CSS
    selectors (CSS2.1 only, and no CSS3 at all). It's possible to overload the
    querySelectorAll prototype, but you can't call the original one. You thus cannot
    use it for CSS2.1 expressions, or for a speedy getElementsByClassName for instance.
    
    You can't do:
    
    Element.prototype._msie_querySelectorAll = Element.prototype.querySelectorAll;
    Element.prototype.getElementsByClassName = function(className) {
      return Element.prototype._msie_querySelectorAll.call(this, '.' + className); // throws an error: not callable.
    }
    
    Of course you may simply call this.querySelectorAll(className), but if you overload
    it and the one you write makes use of getElementsByClassName (for simplicity and
    speed) you're in for some infinite loops :/


