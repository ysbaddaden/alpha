
= Kokone

Kokone is yet another JavaScript library, but an obstrusive one.


== Why?

The initial idea was to create a compatibility library, permitting developers
to write JavaScript and DOM as they are defined by the ECMAScript and the W3C.
This means an obstrusive framework, that would transparently add support for
missing methods, like addEventListener() or querySelectorAll().

I'm sick of having to load tons of JavaScript frameworks, and to learn all of
these just because I want to use a tool that uses jQuery and another one that
uses Mootools. I'm sick of having to rewrite a lot of code written in Mootools,
because I want to use a charting library that's written with jQuery (because
it's stupid to load multiple libraries) with means I have to understand the
jQuery syntax --which I never understood, and will certainly never understand.

I love server frameworks, but I can't stand JavaScript libraries. Unless
you're building a Rich Internet Application, but if that's the case, you'd
better switch to GWT instead.

What I want is to be able to do some DOM and JavaScript and see it working in
most browsers without having to think (too much) about it. I want to be able
to load a tool at a glimpse (like a charting library) that do not rely on a
particular library, and that you can just load.

Of course, behing obstrusive, it certainly collapses with frameworks. I'm sure
there are tons of memory leakages, too (feel free to send patches!). But it works.


== Organisation

Kokone is currently separated in 3 parts :

# 'compat' tries to fix, emulate and implement broken and missing features (yes it's obstrusive).
# 'addons' adds a few methods that I think are missing.
# 'ui' proposes some user interface widgets, like dialogs, tooltips, autocompleters, date pickers, etc (this one is unobstrusive).

You may just use 'compat' or compat + addons, or compat + addons + ui, or
just parts of them (be sure not to miss requirements). Whatever you want.


== TODO

* Inject Explorer Canvas (excanvas) from Google into compat, in order to fix the HTML5 canvas element.
* A Drag And Drop library (is it possible to follow the standards?)
* An animation library to enable some DHTML.


== COULD DO

* A charting library to draw charts --something that uses SVG and Canvas.
* A game library, with sprite animations, etc.

